Inspiration taken from:
https://rosettacode.org/wiki/BNF_Grammar#BASIC

<program> := <statements>

<statements> := <statement> <statements>
			  | <statement>

<statement> := <function-decl>
			 | <label-decl>
			 | <var-decl>
			 | <struct-decl>
			 | <for-stmt>
			 | <while-stmt>
			 | <if-then-stmt>
			 | <if-then-else-stmt>
			 | <expression>

<function-decl> := 'func' <ident> '(' <formal-list> ') '->' <type> <statements> 'end'
				 | 'func' <ident> '(' ')' '->' <type> <statements> 'end'

<label-decl> := <ident> ':'

<var-decl> := <type> <id> ';'

<var-decls> := <var-decl> <var-decls>
			 | <var-decl>

<struct-decl> := 'struct' <id> <var-decls> 'end'

<for-stmt> := 'for' <ident> ':=' <constant> 'to' <constant> <statements> 'end'

<while-stmt> := 'while' '(' <expr-lst> ')' <statements> 'end'

<if-then-stmt> := 'if' '(' <expr-lst> ')' 'then' <statements> 'end'

<if-then-else-stmt> := 'if '(' <expr-lst> ')' 'then' <statements> 'else' <statements> 'end'

<expression> := <bin-op-expr>
			  | <goto-expr>
			  | <call-expr>

<expr-list> := <expression> ',' <expr-list>
			 | <expression>

<formal-list> := <formal> ',' <expr-list>
			 | <formal>

<formal> := <type> <ident>

<bin-op-expr> := <and-expr> 'or' <bin-op-expr>
			   | <and-expr>

<and-expr> := <not-expr> 'and' <and-expr>
		    | <not-expr>

<not-expr> := '!' <compare-expr>
			| <compare-expr>

<compare-expr> := <add-expr> '==' <compare-expr>
				| <add-expr> '!=' <compare-expr>
				| <add-expr> '>' <compare-expr>
				| <add-expr> '>=' <compare-expr>
				| <add-expr> '<' <compare-expr>
				| <add-expr> '<=' <compare-expr>
				| <add-expr>

<add-expr> := <mul-expr> '+' <add-expr>
			| <mul-expr> '-' <add-expr>
			| <mul-expr>

<mul-expr> := <negate-expr> '*' <mul-expr>
			| <negate-expr> '/' <mul-expr>
			| <negate-expr> '%' <mul-expr>
			| <negate-expr>

<negate-expr> := '-' <value>
			   | <value>

<value> := '(' <expression> ')'
		 | <ident>
		 | <ident> '(' <expr-list> ')'
		 | <constant>

<constant> := <int-literal>
			| <string-literal>
			| 'true'
			| 'false'

<goto-expr> := 'goto' <ident> ';'

<call-expr> := <ident> '(' <expr-list> ')

<ident-list> := <ident> ',' <ident-list>
			  | <ident>

<value-list> := <value> ',' <value-list>
			  | <value>

